// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.1
// - protoc             v3.21.7
// source: api/binanceexchange_user/v1/binanceexchange_user.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationBinanceUserSetUser = "/BinanceUser/SetUser"

type BinanceUserHTTPServer interface {
	SetUser(context.Context, *SetUserRequest) (*SetUserReply, error)
}

func RegisterBinanceUserHTTPServer(s *http.Server, srv BinanceUserHTTPServer) {
	r := s.Route("/")
	r.POST("/api/binanceexchange_user/set_user", _BinanceUser_SetUser0_HTTP_Handler(srv))
}

func _BinanceUser_SetUser0_HTTP_Handler(srv BinanceUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetUserRequest
		if err := ctx.Bind(&in.SendBody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBinanceUserSetUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetUser(ctx, req.(*SetUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetUserReply)
		return ctx.Result(200, reply)
	}
}

type BinanceUserHTTPClient interface {
	SetUser(ctx context.Context, req *SetUserRequest, opts ...http.CallOption) (rsp *SetUserReply, err error)
}

type BinanceUserHTTPClientImpl struct {
	cc *http.Client
}

func NewBinanceUserHTTPClient(client *http.Client) BinanceUserHTTPClient {
	return &BinanceUserHTTPClientImpl{client}
}

func (c *BinanceUserHTTPClientImpl) SetUser(ctx context.Context, in *SetUserRequest, opts ...http.CallOption) (*SetUserReply, error) {
	var out SetUserReply
	pattern := "/api/binanceexchange_user/set_user"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBinanceUserSetUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.SendBody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
