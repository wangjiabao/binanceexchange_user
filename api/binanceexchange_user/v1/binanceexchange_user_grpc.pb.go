// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.7
// source: api/binanceexchange_user/v1/binanceexchange_user.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BinanceUser_GetUser_FullMethodName                = "/BinanceUser/GetUser"
	BinanceUser_PullUserDeposit_FullMethodName        = "/BinanceUser/PullUserDeposit"
	BinanceUser_PullUserCredentialsBsc_FullMethodName = "/BinanceUser/PullUserCredentialsBsc"
)

// BinanceUserClient is the client API for BinanceUser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BinanceUserClient interface {
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserReply, error)
	PullUserDeposit(ctx context.Context, in *PullUserDepositRequest, opts ...grpc.CallOption) (*PullUserDepositReply, error)
	PullUserCredentialsBsc(ctx context.Context, in *PullUserCredentialsBscRequest, opts ...grpc.CallOption) (*PullUserCredentialsBscReply, error)
}

type binanceUserClient struct {
	cc grpc.ClientConnInterface
}

func NewBinanceUserClient(cc grpc.ClientConnInterface) BinanceUserClient {
	return &binanceUserClient{cc}
}

func (c *binanceUserClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserReply, error) {
	out := new(GetUserReply)
	err := c.cc.Invoke(ctx, BinanceUser_GetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *binanceUserClient) PullUserDeposit(ctx context.Context, in *PullUserDepositRequest, opts ...grpc.CallOption) (*PullUserDepositReply, error) {
	out := new(PullUserDepositReply)
	err := c.cc.Invoke(ctx, BinanceUser_PullUserDeposit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *binanceUserClient) PullUserCredentialsBsc(ctx context.Context, in *PullUserCredentialsBscRequest, opts ...grpc.CallOption) (*PullUserCredentialsBscReply, error) {
	out := new(PullUserCredentialsBscReply)
	err := c.cc.Invoke(ctx, BinanceUser_PullUserCredentialsBsc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BinanceUserServer is the server API for BinanceUser service.
// All implementations must embed UnimplementedBinanceUserServer
// for forward compatibility
type BinanceUserServer interface {
	GetUser(context.Context, *GetUserRequest) (*GetUserReply, error)
	PullUserDeposit(context.Context, *PullUserDepositRequest) (*PullUserDepositReply, error)
	PullUserCredentialsBsc(context.Context, *PullUserCredentialsBscRequest) (*PullUserCredentialsBscReply, error)
	mustEmbedUnimplementedBinanceUserServer()
}

// UnimplementedBinanceUserServer must be embedded to have forward compatible implementations.
type UnimplementedBinanceUserServer struct {
}

func (UnimplementedBinanceUserServer) GetUser(context.Context, *GetUserRequest) (*GetUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedBinanceUserServer) PullUserDeposit(context.Context, *PullUserDepositRequest) (*PullUserDepositReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullUserDeposit not implemented")
}
func (UnimplementedBinanceUserServer) PullUserCredentialsBsc(context.Context, *PullUserCredentialsBscRequest) (*PullUserCredentialsBscReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullUserCredentialsBsc not implemented")
}
func (UnimplementedBinanceUserServer) mustEmbedUnimplementedBinanceUserServer() {}

// UnsafeBinanceUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BinanceUserServer will
// result in compilation errors.
type UnsafeBinanceUserServer interface {
	mustEmbedUnimplementedBinanceUserServer()
}

func RegisterBinanceUserServer(s grpc.ServiceRegistrar, srv BinanceUserServer) {
	s.RegisterService(&BinanceUser_ServiceDesc, srv)
}

func _BinanceUser_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinanceUserServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BinanceUser_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinanceUserServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BinanceUser_PullUserDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullUserDepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinanceUserServer).PullUserDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BinanceUser_PullUserDeposit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinanceUserServer).PullUserDeposit(ctx, req.(*PullUserDepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BinanceUser_PullUserCredentialsBsc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullUserCredentialsBscRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinanceUserServer).PullUserCredentialsBsc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BinanceUser_PullUserCredentialsBsc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinanceUserServer).PullUserCredentialsBsc(ctx, req.(*PullUserCredentialsBscRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BinanceUser_ServiceDesc is the grpc.ServiceDesc for BinanceUser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BinanceUser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BinanceUser",
	HandlerType: (*BinanceUserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _BinanceUser_GetUser_Handler,
		},
		{
			MethodName: "PullUserDeposit",
			Handler:    _BinanceUser_PullUserDeposit_Handler,
		},
		{
			MethodName: "PullUserCredentialsBsc",
			Handler:    _BinanceUser_PullUserCredentialsBsc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/binanceexchange_user/v1/binanceexchange_user.proto",
}
